fn main() {
    println!("{}", "=== Basic string operations ===".to_string());
    let mut str = "Hello, World!".to_string();
    print!("Original string: {}\n", str);
    print!("Length: {}\n", str.len());
    print!("First character: %c\n", str[0]);
    print!("Last character: %c\n", str[str.len() - 1]);
    print!("Substring [0:5]: {}\n", str[0..5].to_vec());
    print!("Substring [7:]: {}\n", str[7..].to_vec());
    println!("{}", "\n=== String concatenation ===".to_string());
    let mut first = "Hello".to_string();
    let mut second = "World".to_string();
    let mut combined = first + ", ".to_string() + second + "!".to_string();
    print!("Concatenated: {}\n", combined);
    println!("{}", "\n=== strings package functions ===".to_string());
    let mut text = "  Go is awesome for systems programming  ".to_string();
    print!("Original: '{}'\n", text);
    let mut trimmed = text.trim();
    print!("Trimmed: '{}'\n", trimmed);
    print!("Upper: {}\n", trimmed.to_uppercase());
    print!("Lower: {}\n", trimmed.to_lowercase());
    print!("Title: {}\n", strings.title(trimmed));
    println!("{}", "\n=== String searching ===".to_string());
    let mut searchText = "The quick brown fox jumps over the lazy dog".to_string();
    print!("Text: {}\n", searchText);
    print!("Contains 'fox': %t\n", strings.contains(searchText, "fox".to_string()));
    print!("Contains 'cat': %t\n", strings.contains(searchText, "cat".to_string()));
    print!("Index of 'fox': {}\n", strings.index(searchText, "fox".to_string()));
    print!("Index of 'cat': {}\n", strings.index(searchText, "cat".to_string()));
    print!("Last index of 'the': {}\n", strings.last_index(searchText, "the".to_string()));
    print!("Count of 'the': {}\n", strings.count(searchText, "the".to_string()));
    println!("{}", "\n=== Prefixes and suffixes ===".to_string());
    let mut filename = "document.txt".to_string();
    print!("Filename: {}\n", filename);
    print!("Has .txt suffix: %t\n", strings.has_suffix(filename, ".txt".to_string()));
    print!("Has .pdf suffix: %t\n", strings.has_suffix(filename, ".pdf".to_string()));
    print!("Has 'doc' prefix: %t\n", strings.has_prefix(filename, "doc".to_string()));
    println!("{}", "\n=== Splitting and joining ===".to_string());
    let mut csv = "apple,banana,cherry,date".to_string();
    print!("CSV: {}\n", csv);
    let mut fruits = strings.split(csv, ",".to_string());
    print!("Split result: {}\n", fruits);
    let mut rejoined = strings.join(fruits, " | ".to_string());
    print!("Rejoined: {}\n", rejoined);
    let mut sentence = "The quick brown fox".to_string();
    let mut words = strings.fields(sentence);
    print!("Words: {}\n", words);
    println!("{}", "\n=== String replacement ===".to_string());
    let mut original = "I like cats and cats like me".to_string();
    print!("Original: {}\n", original);
    let mut replaced = strings.replace(original, "cats".to_string(), "dogs".to_string(), 1);
    print!("Replace first 'cats': {}\n", replaced);
    let mut replacedAll = strings.replace_all(original, "cats".to_string(), "dogs".to_string());
    print!("Replace all 'cats': {}\n", replacedAll);
    println!("{}", "\n=== String repetition ===".to_string());
    let mut pattern = "Go! ".to_string();
    let mut repeated = strings.repeat(pattern, 3);
    print!("Repeated: {}\n", repeated);
    println!("{}", "\n=== String comparison ===".to_string());
    let mut str1 = "apple".to_string();
    let mut str2 = "banana".to_string();
    let mut str3 = "apple".to_string();
    print!("'{}' == '{}': %t\n", str1, str2, str1 == str2);
    print!("'{}' == '{}': %t\n", str1, str3, str1 == str3);
    print!("'{}' < '{}': %t\n", str1, str2, str1 < str2);
    print!("EqualFold('Apple', 'APPLE'): %t\n", strings.equal_fold("Apple".to_string(), "APPLE".to_string()));
    println!("{}", "\n=== String building ===".to_string());
    let mut builder;
    builder.write_string("Building ".to_string());
    builder.write_string("a ".to_string());
    builder.write_string("string ".to_string());
    builder.write_string("efficiently".to_string());
    let mut built = builder.string();
    print!("Built string: {}\n", built);
    print!("Builder length: {}\n", builder.len());
    println!("{}", "\n=== Unicode and runes ===".to_string());
    let mut unicode = "Hello, 世界! 🌍".to_string();
    print!("Unicode string: {}\n", unicode);
    print!("Byte length: {}\n", unicode.len());
    let mut runeCount = 0;
    for (_, r) in unicode.iter().enumerate() {
        runeCount += 1;
        print!("Rune: %c (U+%04X)\n", r, r);
    }
    print!("Rune count: {}\n", runeCount);
    println!("{}", "\n=== String trimming variations ===".to_string());
    let mut messy = "!!!Hello World!!!".to_string();
    print!("Original: {}\n", messy);
    print!("TrimLeft '!': {}\n", strings.trim_left(messy, "!".to_string()));
    print!("TrimRight '!': {}\n", strings.trim_right(messy, "!".to_string()));
    print!("Trim '!': {}\n", strings.trim(messy, "!".to_string()));
    println!("{}", "\n=== String formatting ===".to_string());
    let mut name = "Alice".to_string();
    let mut age = 30;
    let mut height = 5.6;
    print!("Name: {}, Age: {}, Height: %.1f\n", name, age, height);
    print!("Quoted string: %q\n", name);
    print!("String with width: '%10s'\n", name);
    print!("Left-aligned: '%-10s'\n", name);
}