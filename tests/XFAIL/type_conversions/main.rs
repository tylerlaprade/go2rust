fn main() {
    println!("{}", "=== Basic numeric conversions ===".to_string());
    let mut i = std::sync::Arc::new(std::sync::Mutex::new(Some(42)));
    let mut f = float64(std::sync::Arc::new(std::sync::Mutex::new(Some((*i.lock().unwrap().as_ref().unwrap())))));
    let mut i2 = int(std::sync::Arc::new(std::sync::Mutex::new(Some((*f.lock().unwrap().as_ref().unwrap())))));
    print!("int: {}\n", (*i.lock().unwrap().as_ref().unwrap()));
    print!("float64: {:.2}\n", (*f.lock().unwrap().as_ref().unwrap()));
    print!("back to int: {}\n", (*i2.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Integer size conversions ===".to_string());
    let mut i8 = std::sync::Arc::new(std::sync::Mutex::new(Some(127)));
    let mut i16 = int16(std::sync::Arc::new(std::sync::Mutex::new(Some((*i8.lock().unwrap().as_ref().unwrap())))));
    let mut i32 = int32(std::sync::Arc::new(std::sync::Mutex::new(Some((*i16.lock().unwrap().as_ref().unwrap())))));
    let mut i64 = int64(std::sync::Arc::new(std::sync::Mutex::new(Some((*i32.lock().unwrap().as_ref().unwrap())))));
    print!("int8: {}\n", (*i8.lock().unwrap().as_ref().unwrap()));
    print!("int16: {}\n", (*i16.lock().unwrap().as_ref().unwrap()));
    print!("int32: {}\n", (*i32.lock().unwrap().as_ref().unwrap()));
    print!("int64: {}\n", (*i64.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Unsigned integer conversions ===".to_string());
    let mut ui = std::sync::Arc::new(std::sync::Mutex::new(Some(42)));
    let mut ui8 = uint8(std::sync::Arc::new(std::sync::Mutex::new(Some((*ui.lock().unwrap().as_ref().unwrap())))));
    let mut ui16 = uint16(std::sync::Arc::new(std::sync::Mutex::new(Some((*ui8.lock().unwrap().as_ref().unwrap())))));
    let mut ui32 = uint32(std::sync::Arc::new(std::sync::Mutex::new(Some((*ui16.lock().unwrap().as_ref().unwrap())))));
    let mut ui64 = uint64(std::sync::Arc::new(std::sync::Mutex::new(Some((*ui32.lock().unwrap().as_ref().unwrap())))));
    print!("uint: {}\n", (*ui.lock().unwrap().as_ref().unwrap()));
    print!("uint8: {}\n", (*ui8.lock().unwrap().as_ref().unwrap()));
    print!("uint16: {}\n", (*ui16.lock().unwrap().as_ref().unwrap()));
    print!("uint32: {}\n", (*ui32.lock().unwrap().as_ref().unwrap()));
    print!("uint64: {}\n", (*ui64.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Float conversions ===".to_string());
    let mut f64 = std::sync::Arc::new(std::sync::Mutex::new(Some(3.14159265359)));
    let mut f32 = float32(std::sync::Arc::new(std::sync::Mutex::new(Some((*f64.lock().unwrap().as_ref().unwrap())))));
    let mut backToF64 = float64(std::sync::Arc::new(std::sync::Mutex::new(Some((*f32.lock().unwrap().as_ref().unwrap())))));
    print!("float64: %.10f\n", (*f64.lock().unwrap().as_ref().unwrap()));
    print!("float32: %.10f\n", (*f32.lock().unwrap().as_ref().unwrap()));
    print!("back to float64: %.10f\n", (*backToF64.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== String conversions ===".to_string());
    let mut r = std::sync::Arc::new(std::sync::Mutex::new(Some('A')));
    let mut b = std::sync::Arc::new(std::sync::Mutex::new(Some(65)));
    print!("rune 'A': %c ({})\n", (*r.lock().unwrap().as_ref().unwrap()), (*r.lock().unwrap().as_ref().unwrap()));
    print!("byte 65: %c ({})\n", (*b.lock().unwrap().as_ref().unwrap()), (*b.lock().unwrap().as_ref().unwrap()));
    let mut str = string(std::sync::Arc::new(std::sync::Mutex::new(Some((*r.lock().unwrap().as_ref().unwrap())))));
    print!("rune to string: {}\n", (*str.lock().unwrap().as_ref().unwrap()));
    let mut bytes = std::sync::Arc::new(std::sync::Mutex::new(Some(vec![72, 101, 108, 108, 111])));
    let mut strFromBytes = string(std::sync::Arc::new(std::sync::Mutex::new(Some((*bytes.lock().unwrap().as_ref().unwrap())))));
    print!("bytes to string: {}\n", (*strFromBytes.lock().unwrap().as_ref().unwrap()));
    let mut backToBytes = (std::sync::Arc::new(std::sync::Mutex::new(Some((*strFromBytes.lock().unwrap().as_ref().unwrap())))));
    print!("string to bytes: {}\n", (*backToBytes.lock().unwrap().as_ref().unwrap()));
    let mut runes = (std::sync::Arc::new(std::sync::Mutex::new(Some("Hello, 世界".to_string()))));
    print!("string to runes: {}\n", (*runes.lock().unwrap().as_ref().unwrap()));
    print!("rune count: {}\n", (*runes.lock().unwrap().as_ref().unwrap()).len());
    let mut backToString = string(std::sync::Arc::new(std::sync::Mutex::new(Some((*runes.lock().unwrap().as_ref().unwrap())))));
    print!("runes to string: {}\n", (*backToString.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Boolean-like conversions ===".to_string());
    let mut zero = std::sync::Arc::new(std::sync::Mutex::new(Some(0)));
    let mut nonZero = std::sync::Arc::new(std::sync::Mutex::new(Some(42)));
    print!("zero == 0: {}\n", (*zero.lock().unwrap().as_ref().unwrap()) == 0);
    print!("nonZero != 0: {}\n", (*nonZero.lock().unwrap().as_ref().unwrap()) != 0);
    println!("{}", "\n=== Pointer conversions ===".to_string());
    let mut num = std::sync::Arc::new(std::sync::Mutex::new(Some(100)));
    let mut ptr = std::sync::Arc::new(std::sync::Mutex::new(Some(num.clone())));
    print!("value: {}\n", (*num.lock().unwrap().as_ref().unwrap()));
    print!("pointer: %p\n", (*ptr.lock().unwrap().as_ref().unwrap()));
    print!("dereferenced: {}\n", (*ptr.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Interface conversions ===".to_string());
    let mut any = std::sync::Arc::new(std::sync::Mutex::new(Some(42)));
    print!("interface{} value: {}\n", (*any.lock().unwrap().as_ref().unwrap()));
    print!("interface{} type: %T\n", (*any.lock().unwrap().as_ref().unwrap()));
    let (mut intVal, mut ok) = match (*any.lock().unwrap().as_ref().unwrap()).downcast_ref::<i32>() { Some(v) => (v.clone(), true), None => (0, false) };
    if (*ok.lock().unwrap().as_ref().unwrap()) {
        print!("asserted as int: {}\n", (*intVal.lock().unwrap().as_ref().unwrap()));
    }
    { let new_val = "hello".to_string(); *any.lock().unwrap() = Some(new_val); };
    print!("new interface{} value: {}\n", (*any.lock().unwrap().as_ref().unwrap()));
    print!("new interface{} type: %T\n", (*any.lock().unwrap().as_ref().unwrap()));
    let (mut strVal, mut ok) = match (*any.lock().unwrap().as_ref().unwrap()).downcast_ref::<String>() { Some(v) => (v.clone(), true), None => (String::new(), false) };
    if (*ok.lock().unwrap().as_ref().unwrap()) {
        print!("asserted as string: {}\n", (*strVal.lock().unwrap().as_ref().unwrap()));
    }
    println!("{}", "\n=== Complex number conversions ===".to_string());
    let mut c64 = std::sync::Arc::new(std::sync::Mutex::new(Some(3 + 4i)));
    let mut c128 = complex128(std::sync::Arc::new(std::sync::Mutex::new(Some((*c64.lock().unwrap().as_ref().unwrap())))));
    print!("complex64: {}\n", (*c64.lock().unwrap().as_ref().unwrap()));
    print!("complex128: {}\n", (*c128.lock().unwrap().as_ref().unwrap()));
    let mut real = real(std::sync::Arc::new(std::sync::Mutex::new(Some((*c128.lock().unwrap().as_ref().unwrap())))));
    let mut imag = imag(std::sync::Arc::new(std::sync::Mutex::new(Some((*c128.lock().unwrap().as_ref().unwrap())))));
    print!("real part: {:.2}\n", (*real.lock().unwrap().as_ref().unwrap()));
    print!("imaginary part: {:.2}\n", (*imag.lock().unwrap().as_ref().unwrap()));
    let mut newComplex = complex(std::sync::Arc::new(std::sync::Mutex::new(Some((*real.lock().unwrap().as_ref().unwrap())))), std::sync::Arc::new(std::sync::Mutex::new(Some((*imag.lock().unwrap().as_ref().unwrap())))));
    print!("reconstructed: {}\n", (*newComplex.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Overflow examples ===".to_string());
    let mut bigInt = std::sync::Arc::new(std::sync::Mutex::new(Some(1000000)));
    let mut smallInt = int8(std::sync::Arc::new(std::sync::Mutex::new(Some((*bigInt.lock().unwrap().as_ref().unwrap())))));
    print!("int64: {}\n", (*bigInt.lock().unwrap().as_ref().unwrap()));
    print!("int8 (overflow): {}\n", (*smallInt.lock().unwrap().as_ref().unwrap()));
    let mut preciseFloat = std::sync::Arc::new(std::sync::Mutex::new(Some(1.23456789012345)));
    let mut lessPrec = float32(std::sync::Arc::new(std::sync::Mutex::new(Some((*preciseFloat.lock().unwrap().as_ref().unwrap())))));
    print!("float64: %.15f\n", (*preciseFloat.lock().unwrap().as_ref().unwrap()));
    print!("float32: %.15f\n", (*lessPrec.lock().unwrap().as_ref().unwrap()));
    println!("{}", "\n=== Custom type conversions ===".to_string());
    
    
    let mut mi = std::sync::Arc::new(std::sync::Mutex::new(Some(42)));
    let mut regularInt = int(std::sync::Arc::new(std::sync::Mutex::new(Some((*mi.lock().unwrap().as_ref().unwrap())))));
    let mut backToMyInt = my_int(std::sync::Arc::new(std::sync::Mutex::new(Some((*regularInt.lock().unwrap().as_ref().unwrap())))));
    print!("MyInt: {}\n", (*mi.lock().unwrap().as_ref().unwrap()));
    print!("regular int: {}\n", (*regularInt.lock().unwrap().as_ref().unwrap()));
    print!("back to MyInt: {}\n", (*backToMyInt.lock().unwrap().as_ref().unwrap()));
    let mut ms = std::sync::Arc::new(std::sync::Mutex::new(Some("hello".to_string())));
    let mut regularString = string(std::sync::Arc::new(std::sync::Mutex::new(Some((*ms.lock().unwrap().as_ref().unwrap())))));
    let mut backToMyString = my_string(std::sync::Arc::new(std::sync::Mutex::new(Some((*regularString.lock().unwrap().as_ref().unwrap())))));
    print!("MyString: {}\n", (*ms.lock().unwrap().as_ref().unwrap()));
    print!("regular string: {}\n", (*regularString.lock().unwrap().as_ref().unwrap()));
    print!("back to MyString: {}\n", (*backToMyString.lock().unwrap().as_ref().unwrap()));
}